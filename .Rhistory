install.packages("tibble")
vignette("tibble")
library(tibble)
l <- replicate(26, sample(100), simplify = FALSE)
names(l) <- letters
l
as_tibble(l)
df1 <- data.frame(x = 1:3, y = 3:1)
df1
class(df1[, 1:2])
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
df2$a
calculate.delta <- function(df, col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
calculate.delta(mtcars, wt)
head(mtcars)
calculate.delta(mtcars, "wt")
library(dplyr)
library(purr)
calculate.delta <- function(df, col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
calculate.delta(mtcars, "wt")
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta)
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutate_(data = ., .dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta, df=mtcars)
mapply(calculate.delta, mtcars, df=mtcars)
head(mtcars)
calculate.delta <- function(col, df) {
if (class(df[col]) == c("numeric", "double") {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
}
mapply(calculate.delta, mtcars, df=mtcars)
head(mtcars)
?map_at
library(purrr)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
vars <- c("mpg", "hp", "wt")
mtcars %>% map_at(.at = vars, .f = calculate.delta, df = .f)
vars <- c("mpg", "hp", "wt")
mtcars %>% map_at(.at = vars, .f = calculate.delta, df = .)
?map-at
?map_at
mtcars %>% map_at(vars, calculate.delta)
mtcars %>% map_at(vars, calculate.delta, df=.)
map_at(.x = mtcars, .at = vars, .f = calculate.delta, df=.)
map_at(.x = mtcars, .at = vars, .f = calculate.delta, df=mtcars)
sapply(vars, FUN = calculate.delta, df = mtcars)
mapply(calculate.delta, vars, MoreArgs = list(df=mtcars))
test <- mapply(calculate.delta, vars, MoreArgs = list(df=mtcars))
test
class(test)
calculate.delta("wt", mtcars)
map_at(mtcars, c("wt", "mpg"), calculate.delta, df = mtcars)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(df=., .dots = setNames(list(calculate_lag), newcolname))
mutated
}
mtcars %>% map_at(c("wt", "mpg"), calculate.delta)
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(df=., .dots = setNames(list(calculate_lag), newcolname))
mutated
}
mtcars %>% map_at(c("wt", "mpg"), calculate.delta)
test <- mtcars %>% map_at(c("wt", "mpg"), calculate.delta, df = .)
test <- mtcars %>% map_at(.at = c("wt", "mpg"), .f = calculate.delta, df = .)
test <- mtcars %>% map_at(.x=., .at = c("wt", "mpg"), .f = calculate.delta, df = .)
?map
test <- mtcars %>% map(calculate.delta)
test <- mtcars %>% map(calculate.delta, df=.)
test <- mtcars %>% map(.f = calculate.delta, df=.)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
test <- mtcars %>% map(.f = calculate.delta, df=.)
test <- mtcars %>% map(.x = mtcars.f = calculate.delta, df=.)
test <- mtcars %>% map(.x = mtcars,.f = calculate.delta, df=.)
?map2
test <- mtcars %>% mutate(new = calculate.delta(wt))
library(dplyr)
library(purrr)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
test <- mtcars %>% mutate(new = calculate.delta(wt))
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = .)
mutated
}
test <- mtcars %>% mutate(new = calculate.delta(wt))
col <- mtcars$wt
result <- col + lag(col))/col
col + lag(col))/col
col + col
result <- col + lag(col)/col
result
newcolname = paste("d", col, sep="")
newcolname
mtcars %>% mutate_at(cols, funs(lagged = delta))
delta <- function(x) (x + dplyr::lag(x)) /x
mtcars %>% mutate_at(cols, funs(lagged = delta))
library(dplyr)
library(purrr)
library(dplyr)
delta <- function(x) (x + dplyr::lag(x)) /x
mtcars %>% mutate_at(cols, funs(lagged = delta))
library(dplyr)
delta <- function(x) (x + dplyr::lag(x)) /x
cols <- c("wt", "mpg")
mtcars %>% mutate_at(cols, funs(lagged = delta))
mtcars %>% group_by(cyl) %>% mutate_at(cols, funs(lagged = delta))
test <- mtcars %>% group_by(cyl) %>% mutate_at(cols, funs(lagged = delta))
View(test)
##################
###   setup    ###
##################
#working.directory <- "~/Documents/hrd/collegescorecardanalysis"
working.directory <- "I:/User/Williams/2016 Interim/College Scorecard Analysis"
setwd(working.directory)
library(dplyr)
library(ggplot2)
library(scales)
load("debtdata_clean.rda")
##################
###Inspect Data###
##################
### get number of missings and uncategorized by year
brokenyears <- debtdata %>%
group_by(data.year) %>%
summarise(missings=sum(is.na(debt_mdn)),
uncategorized = sum(mn.category == ""),
suppressed = sum(debt_mdn == "PrivacySuppressed", na.rm=TRUE),
datapresent = sum(!(is.na(debt_mdn)) & !(mn.category == "") & !(debt_mdn=="PrivacySuppressed")),
count=n()
)
brokenyears
##################
###   setup    ###
##################
#working.directory <- "~/Documents/hrd/collegescorecardanalysis"
working.directory <- "I:/User/Williams/2016 Interim/College Scorecard Analysis"
setwd(working.directory)
library(dplyr)
library(ggplot2)
library(scales)
load("debtdata_clean.rda")
##################
###Inspect Data###
##################
### get number of missings and uncategorized by year
brokenyears <- debtdata %>%
group_by(data.year) %>%
summarise(missings=sum(is.na(debt_mdn)),
uncategorized = sum(mn.category == ""),
suppressed = sum(debt_mdn == "PrivacySuppressed", na.rm=TRUE),
datapresent = sum(!(is.na(debt_mdn)) & !(mn.category == "") & !(debt_mdn=="PrivacySuppressed")),
count=n()
)
brokenyears
########################
#working.directory <- "~/Documents/hrd/collegescorecardanalysis"
working.directory <- "I:/User/Williams/Publications/College Scorecard Analysis 2016"
setwd(working.directory)
library(dplyr)
library(ggplot2)
library(scales)
load("debtdata_clean.rda")
##################
###Inspect Data###
##################
### get number of missings and uncategorized by year
brokenyears <- debtdata %>%
group_by(data.year) %>%
summarise(missings=sum(is.na(debt_mdn)),
uncategorized = sum(mn.category == ""),
suppressed = sum(debt_mdn == "PrivacySuppressed", na.rm=TRUE),
datapresent = sum(!(is.na(debt_mdn)) & !(mn.category == "") & !(debt_mdn=="PrivacySuppressed")),
count=n()
)
brokenyears
#Clean up data for making graph chart
graphcategories <- debtdata %>%
filter(mn.category != "") %>% #exclude uncategorized schools
filter(!(is.na(debt_mdn))) %>% #exclude not available data
filter(debt_mdn != "PrivacySuppressed") %>% #exclude privacy suppressed data
filter(data.year != 1996) %>% #exclude 1996 because the data is missing
mutate(debt_mdn = as.numeric(debt_mdn)) %>% #convert median debt number to
group_by(mn.category, data.year, DegreeLevel) %>%
summarise(meandebt = mean(debt_mdn))
#### Black and white version ####
graph_bw <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's" | DegreeLevel == "Bachelor's") %>%
mutate(DegreeLevel = factor(DegreeLevel,
levels = c("Bachelor's",
"Certificate/Associate's"                   ),
labels=c("Predominantly 4-Year Degree Granting",
"Predominantly 2-Year Degree Granting"))) %>%
ggplot(aes(x=data.year,
y=meandebt,
shape=factor(mn.category),
group = factor(mn.category)))
graph_bw
sidebyside_bw <- graph_bw +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2013), breaks = c(1997, 2001, 2005, 2009, 2013)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,20000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
facet_grid(.~DegreeLevel) +
labs(title="Federal Debt Loads Upon Entering Repayment by Institution Type, 1997-2013")
sidebyside_bw
#### Color line version ####
graph_color <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's" | DegreeLevel == "Bachelor's") %>%
mutate(DegreeLevel = factor(DegreeLevel,
levels = c("Bachelor's",
"Certificate/Associate's"                   ),
labels=c("Predominantly 4-Year Degree Granting",
"Predominantly 2-Year Degree Granting"))) %>%
ggplot(aes(x=data.year,
y=meandebt,
color=factor(mn.category),
group = factor(mn.category)))
graph_color
#### Black and white 2yr graph ####
graph_twoyr <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's") %>%
ggplot(aes(x=data.year,
y=meandebt,
shape=factor(mn.category),
group=factor(mn.category)))
graph_twoyr <-graph_twoyr +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2013), breaks = c(1997, 2001, 2005, 2009, 2013)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,20000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
labs(title="Federal Debt Loads Upon Entering Repayment, Two-year Schools, 1997-2013")
graph_twoyr
graph_twoyr <-graph_twoyr +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2013), breaks = c(1997, 2001, 2005, 2009, 2013)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,13000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
labs(title="Federal Debt Loads Upon Entering Repayment, Two-year Schools, 1997-2013")
graph_twoyr
#write file out to .emf file for microsoft word
library(devEMF)
emf(file = "twoyearschools.emf",
bg = "transparent",
family = "Helvetica",
width = 10,
height = 6)
graph_twoyr
dev.off()
#write file out to .emf file for microsoft word
library(devEMF)
emf(file = "twoyearschools.emf",
bg = "transparent",
family = "Helvetica",
width = 8,
height = 6)
graph_twoyr
dev.off()
brokenyears <- debtdata %>%
group_by(data.year) %>%
summarise(missings=sum(is.na(debt_mdn)),
uncategorized = sum(mn.category == ""),
suppressed = sum(debt_mdn == "PrivacySuppressed", na.rm=TRUE),
datapresent = sum(!(is.na(debt_mdn)) & !(mn.category == "") & !(debt_mdn=="PrivacySuppressed")),
count=n()
)
brokenyears
graph_twoyr <-graph_twoyr +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2013, 2015), breaks = c(1997, 2001, 2005, 2009, 2013, 2015)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,13000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
labs(title="Federal Debt Loads Upon Entering Repayment, Two-year Schools, 1997-2013")
graph_twoyr
graph_twoyr <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's") %>%
ggplot(aes(x=data.year,
y=meandebt,
shape=factor(mn.category),
group=factor(mn.category)))
graph_twoyr <-graph_twoyr +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2013, 2015), breaks = c(1997, 2001, 2005, 2009, 2013, 2015)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,13000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
labs(title="Federal Debt Loads Upon Entering Repayment, Two-year Schools, 1997-2013")
graph_twoyr
graph_twoyr <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's") %>%
ggplot(aes(x=data.year,
y=meandebt,
shape=factor(mn.category),
group=factor(mn.category)))
graph_twoyr <-graph_twoyr +
geom_line() +
geom_point(size=2) +
scale_x_continuous("", limits = c(1997, 2015), breaks = c(1997, 2001, 2005, 2009, 2013, 2015)) +
scale_y_continuous("Average Median Debt (Nominal $)", limits = c(0,13000), labels=dollar) +
guides(shape = guide_legend(title = "")) +
theme_bw() +
theme(legend.position = "bottom") +
theme(axis.text.y = element_text(size=10)) +
labs(title="Federal Debt Loads Upon Entering Repayment, Two-year Schools, 1997-2013")
graph_twoyr
table
?table
table(DegreeLevel,mn.category)
table(graphcategories$DegreeLevel, graphcategories$mn.category)
View(graphcategories)
View(debtdata)
table(debtdata$degree.category, mn.category)
table(debtdata$degree.category, debtdata$mn.category)
View(filter(debtdata, degree.category == ""))
filter(debtdata, data.year==2015)
debtdata <- filter(debtdata, data.year==2015)
table(debtdata$degree.category, debtdata$mn.category)
graph_bw <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's" | DegreeLevel == "Bachelor's") %>%
mutate(DegreeLevel = factor(DegreeLevel,
levels = c("Bachelor's",
"Certificate/Associate's"                   ),
labels=c("Predominantly 4-Year Degree Granting",
"Predominantly 2-Year Degree Granting")))
graph_bw
View(graph_bw)
graph_twoyr <- graphcategories %>%
filter(DegreeLevel == "Certificate/Associate's")
graph_twoyr
View(graph_twoyr)
View(debtdata)
View(filter(debtdata, mn.category=="Private, For-Profit"))
table(debtdata$preddeg)
##################
### parameters ###
##################
working.directory <- "I:/User/Williams/2016 Interim/College Scorecard Analysis"
setwd(working.directory)
library(dplyr)
##################
### cleaning #####
##################
#Load aggregate data file or run source file to create it.
if (!file.exists("debtdata.rda")) {
source('filteraggregate.R')
} else {
load("debtdata.rda")
}
#### Clean up Uppercase Strings ####
#clean up variable names
names(debtdata) <- tolower(names(debtdata))
#clean up institution names
#convert to lowercase
debtdata <- mutate(debtdata, instnm = tolower(instnm)) %>%
#capitalize all word boundaries
mutate(instnm = gsub("\\b(\\w)", "\\U\\1", instnm, perl = TRUE)) %>%
#make and and or lowercased
mutate(instnm = gsub("And", "and", instnm)) %>%
mutate(instnm = gsub("Of", "of", instnm))
#### categorize schools by number of years ##
debtdata$DegreeLevel <- ""
debtdata[(debtdata$preddeg == 1 | debtdata$preddeg == 2),]$DegreeLevel <- "Certificate/Associate's"
debtdata[debtdata$preddeg == 3,]$DegreeLevel <- "Bachelor's"
debtdata[debtdata$preddeg == 4,]$DegreeLevel <- "Master's"
#### categorize schools narrowly ####
debtdata$school.category <- ""
#Publics
debtdata[debtdata$control == 1 & debtdata$preddeg == 1, ]$school.category <- "Public Certificate"
debtdata[debtdata$control == 1 & debtdata$preddeg == 2, ]$school.category <- "Public Associate's"
debtdata[debtdata$control == 1 & debtdata$preddeg == 3, ]$school.category <- "Public Bachelor's"
debtdata[debtdata$control == 1 & debtdata$preddeg == 4, ]$school.category <- "Public Graduate"
#non-profits
debtdata[debtdata$control == 2 & debtdata$preddeg == 1, ]$school.category <- "Non-Profit Certificate"
debtdata[debtdata$control == 2 & debtdata$preddeg == 2, ]$school.category <- "Non-Profit Associate's"
debtdata[debtdata$control == 2 & debtdata$preddeg == 3, ]$school.category <- "Non-Profit Bachelor's"
debtdata[debtdata$control == 2 & debtdata$preddeg == 4, ]$school.category <- "Non-Profit Graduate"
#for-profits
debtdata[debtdata$control == 3 & debtdata$preddeg == 1, ]$school.category <- "For-Profit Certificate"
debtdata[debtdata$control == 3 & debtdata$preddeg == 2, ]$school.category <- "For-Profit Associate's"
debtdata[debtdata$control == 3 & debtdata$preddeg == 3, ]$school.category <- "For-Profit Bachelor's"
debtdata[debtdata$control == 3 & debtdata$preddeg == 4, ]$school.category <- "For-Profit Graduate"
#not classified
debtdata[debtdata$control == 0 | debtdata$preddeg == 0, ]$school.category <- "Not Classified"
#### categorize schools into degree categories ####
debtdata$degree.category <- ""
debtdata[debtdata$preddeg== 1 | debtdata$preddeg== 2, ]$degree.category <- "2-Year Degree or Certificate"
debtdata[debtdata$preddeg== 3, ]$degree.category <- "4-Year Bachelor's"
debtdata[debtdata$preddeg==4,]$degree.category <- "Graduate Degree"
#### Categorize Schools in to Minnesota categories ####
debtdata$mn.category <- ""
debtdata$mn.category <- replace(debtdata$mn.category, grep("University of Minnesota-", debtdata$instnm), "U of M")
debtdata$mn.category <- replace(debtdata$mn.category,debtdata$control == 1 & debtdata$mn.category != "U of M" , "Minnesota State")
debtdata$mn.category <- replace(debtdata$mn.category,debtdata$control == 2, "Private, Non-Profit")
debtdata$mn.category <- replace(debtdata$mn.category,debtdata$control == 3, "Private, For-Profit")
View(filter(debtdata, school.category=="Not Classified"))
debtdata[debtdata$school.category=="Not Classified",]
